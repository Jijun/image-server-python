#!/usr/bin/env python# -*- coding: utf-8 -*-__author__ = 'tyk'import base64import functoolsimport memcacheimport image_utilsmc = memcache.Client(['10.101.110.17:11211'])def load_image(func):    @functools.wraps(func)    def wrapper(*args, **kw):        that = args[0]        uri = that.uri        key = base64.urlsafe_b64encode(uri)        try:            im = mc.get(key)            if im:                content_type = MIME.get(ext.lower(), "image/jpeg")                that.set_header("Content-Type", content_type)                expiry_time = datetime.datetime.utcnow() + datetime.timedelta(100)                that.set_header("Expires", expiry_time.strftime("%a, %d %b %Y %H:%M:%S GMT"))                # self.set_header("Cache-Control", "max-age=" + str(10 * 365 * 24 * 60 * 60))                that.write(im)                return        except:            pass        return func(*args, **kw)    return wrapperdef cache_image(func):    @functools.wraps(func)    def wrapper(*args, **kw):        that = args[0]        uri = that.uri        key = base64.urlsafe_b64encode(uri)        image_data = image_utils.get_image_data(*args[1:])        try:            mc.set(key, image_data)        except:            pass        return func(*args, **kw)    return wrapperclass Request:    @load_image    def get(self, image_name):        print 'Get Image: ', image_name    def write_image(self, im):        print 'Write Image: ', im    @cache_image    def write_image_cached(self, *args):        self.write_image(*args)req = Request()req.write_image_cached('007.jpg')req.get('008.jpg')memcache.Client